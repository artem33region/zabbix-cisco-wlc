<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-05-30T13:04:33Z</date>
    <groups>
        <group>
            <name>CISCO WLC</name>
        </group>
    </groups>
    <templates>
        <template>
            <template>CISCO-WLC</template>
            <name>CISCO-WLC</name>
            <groups>
                <group>
                    <name>CISCO WLC</name>
                </group>
            </groups>
            <discovery_rules>
                <discovery_rule>
                    <name>APs</name>
                    <type>SNMP_AGENT</type>
                    <snmp_oid>discovery[{#BSNAPNAME}, enterprises.14179.2.2.1.1.3, {#BSNAPOPERATIONSTATUS}, enterprises.14179.2.2.1.1.6, {#BSNAPMODEL}, enterprises.14179.2.2.1.1.16, {#BSNAPSERIALNUMBER}, enterprises.14179.2.2.1.1.17, {#BSNAPIPADDRESS}, enterprises.14179.2.2.1.1.19, {#CLCCDPAPCACHENEIGHNAME}, .1.3.6.1.4.1.9.9.623.1.3.1.1.6, {#CLCCDPAPCACHENEIGHADDRESS}, .1.3.6.1.4.1.9.9.623.1.3.1.1.8, {#CLCCDPAPCACHENEIGHINTERFACE}, .1.3.6.1.4.1.9.9.623.1.3.1.1.9]</snmp_oid>
                    <key>aps</key>
                    <lifetime>7d</lifetime>
                    <item_prototypes>
                        <item_prototype>
                            <name>Состояние точки доступа {#BSNAPNAME}</name>
                            <type>SNMP_AGENT</type>
                            <snmp_oid>enterprises.14179.2.2.1.1.6.{#SNMPINDEX}</snmp_oid>
                            <key>enterprises.14179.2.2.1.1.6.[{#SNMPINDEX}]</key>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=2</expression>
                                    <name>Состояние точки доступа {#BSNAPNAME} disassociating</name>
                                    <priority>AVERAGE</priority>
                                    <description>Точка доступа подключенная к контроллеру {HOST.NAME}&#13;
Коммутатор: {#CLCCDPAPCACHENEIGHNAME}&#13;
IP коммутатора: {#CLCCDPAPCACHENEIGHADDRESS}&#13;
Интерфейс коммутатора: {#CLCCDPAPCACHENEIGHINTERFACE}&#13;
Модель: {#BSNAPMODEL}&#13;
Серийный номер: {#BSNAPSERIALNUMBER}</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                        <item_prototype>
                            <name>Ping {#BSNAPNAME}</name>
                            <type>SIMPLE</type>
                            <key>icmpping[{#BSNAPIPADDRESS},,,,]</key>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <expression>{last()}=0</expression>
                                    <name>Точка доступа {#BSNAPNAME} не доступна по ping.</name>
                                    <priority>AVERAGE</priority>
                                    <description>Точка доступа подключенная к контроллеру {HOST.NAME}&#13;
Коммутатор: {#CLCCDPAPCACHENEIGHNAME}&#13;
IP коммутатора: {#CLCCDPAPCACHENEIGHADDRESS}&#13;
Интерфейс коммутатора: {#CLCCDPAPCACHENEIGHINTERFACE}&#13;
Модель: {#BSNAPMODEL}&#13;
Серийный номер: {#BSNAPSERIALNUMBER}</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <params>var data1 = JSON.parse(value);
const temp = {};

for (var i = 0; i &lt; data1.length; i++) {
  const entry = data1[i];
  const SNMPINDEX = entry[&quot;{#SNMPINDEX}&quot;].replace(/^(\d+(?:\.\d+){5})\.[1-9]$/, '$1');

  if (!temp[SNMPINDEX]) {
    temp[SNMPINDEX] = Object.assign({}, entry, { &quot;{#SNMPINDEX}&quot;: SNMPINDEX });
  } else {
    Object.assign(temp[SNMPINDEX], entry, { &quot;{#SNMPINDEX}&quot;: SNMPINDEX });
  }
}

const data2 = Object.keys(temp).map(function (key) { return temp[key]; });


function ipHexToDecimal(ip) {
  var splitData = ip.trim().split(&quot; &quot;);
  for (var i = 0; i &lt; splitData.length; i++){
    splitData[i] = parseInt(splitData[i], 16);
  }
return splitData.join(&quot;.&quot;);
}

var val_json = data2;
for (i in val_json) {
  val_json[i][&quot;{#CLCCDPAPCACHENEIGHADDRESS}&quot;] = ipHexToDecimal(val_json[i][&quot;{#CLCCDPAPCACHENEIGHADDRESS}&quot;]);
}
return JSON.stringify(val_json);</params>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
        </template>
    </templates>
</zabbix_export>
